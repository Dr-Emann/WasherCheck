/*
 * Copyright (c) 2013. Zachary Dremann
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        applicationId "air.air.net.zdremann.zsuds"
        versionName calcVersionName()
        versionCode (calcVersionCode() + 20000000)

    }

    signingConfigs {
        release {
            storeFile file("tmp")
        }
    }

    final Console console = System.console();
    if (new File("signing.properties").canRead()) {
        Properties props = new Properties()
        props.load(new FileInputStream("signing.properties"))
        android.signingConfigs.release.storeFile = file(props['keystore'])
        android.signingConfigs.release.storePassword =  props['keystore.password']
        android.signingConfigs.release.keyAlias = props['keyAlias']
        android.signingConfigs.release.keyPassword props['keyPassword']
    }
    else {
        String storeFile = System.getenv("SIGNING_STORE_FILE")
        String storePass = System.getenv("SIGNING_STORE_PASSWORD")
        String alias = System.getenv("SIGNING_KEY_ALIAS")
        String keyPass = System.getenv("SIGNING_KEY_PASSWORD")

        if (storeFile != null && storePass != null && alias != null && keyPass != null) {
            android.signingConfigs.release.storeFile = file(storeFile)
            android.signingConfigs.release.storePassword = storePass
            android.signingConfigs.release.keyAlias = alias
            android.signingConfigs.release.keyPassword keyPass
        } else {
            println 'signing.properties not found'
            println 'you can also use the environment variables:'
            println '\tSIGNING_STORE_FILE, SIGNING_STORE_PASSWORD, SIGNING_KEY_ALIAS, and SIGNING_KEY_PASSWORD'
        }

    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            // shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

dependencies {
    compile 'com.google.android.gms:play-services-analytics:11.4.0'
    compile 'com.google.android.gms:play-services-gcm:11.4.0'
    compile 'com.android.support:support-v4:25.4.0'
    compile 'com.android.support:appcompat-v7:25.4.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile 'com.google.dagger:dagger:2.11'
    kapt 'com.google.dagger:dagger-compiler:2.11'
    provided 'javax.annotation:jsr250-api:1.0'
    //compile files('libs/libGoogleAnalyticsServices.jar')
}

repositories {
    jcenter()
}

kapt {
    generateStubs = true
}

def calcVersionCode() {
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'tag', '--list'
            standardOutput = code
        }
        return code.toString().split("\n").size()
    }
    catch (ignored) {
        return -1;
    }
}

def calcVersionName() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}
